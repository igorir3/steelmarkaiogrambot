import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters.command import Command

bot = Bot(token="")
dp = Dispatcher()

def canbeint(text):
    agree = None
    try:
        text = int(text)
        agree = True
    except:
        agree = False
    return agree

MATERIALS = {
"А" : "Азот (N)",
"Д" : "Медь (Cu)",
"Ю" : "Алюминий (Al)",
"М" : "Молибден (Mo)",
"Р" : "Бор (B)",
"Н" : "Никель (Ni)",
"Ф" : "Ванадий (V)",
"Б" : "Ниобий (Nb)",
"В" : "Вольфрам (W)" ,
"С" : "Свинец (Pb)",
"Е" : "Селен (Se)",
"К" : "Кобальт (Co)" ,
'Т' : "Титан (Ti)",
"С" : "Кремний (Si)",
"Х" : "Хром (Cr)",
"Г" : "Марганец (Mn)",
"П" : "Фосфор (Р)"
}

def inmaterials(l):
    global MATERIALS
    agreed = True
    for x in l:
        if x in MATERIALS:
            pass
        elif canbeint(x):
            pass
        else:
            agreed = False
    return agreed

FUNCCLASS = {
    "380–2005" : [["Конструкционная строительная сталь", "Для сварных конструкций", "менее 0,2"],
                  ["Конструкционная машиностроительная сталь", "Для деталей, получаемых глубокой вытяжкой", "менее 0,15"],
                  ["Конструкционная машиностроительная сталь", "Для силовых деталей", " 0,28-0,49"]],
    "19282–73" : ["Конструкционная строительная сталь", "Для сварных конструкций", "0,09-0,15"],
    "5781–82" : ["Конструкционная строительная сталь", "Для арматуры", "0,2–0,35"],
    "1050–88" : [["Конструкционная машиностроительная сталь", "Для деталей, получаемых глубокой вытяжкой", "менее 0,06"],
                 ["Конструкционная машиностроительная сталь", "Для цементуемых деталей", "0,08-0,25"],
                 ["Конструкционная машиностроительная сталь", "Для силовых деталей", "0,3-0,50"]],
    "1414–75" : ["Конструкционная машиностроительная сталь", "Для деталей, обрабатываемых на станках автоматах", "0,12-0,40"],
    "5520–79" : ["Конструкционная строительная сталь", "Для деталей котлов", "0,12-0,22"],
    "20072–74" : ["Конструкционная строительная сталь", "Для сварных деталей, работающих при повышенных температурах", "0,12-0,25"],
    "4543–71" : [["Конструкционная строительная сталь", "Для цементуемых деталей", " 0,15-0,25"],
                 ["Конструкционная машиностроительная сталь", "Для силовых деталей", "0,3-0,50"]],
    "14959–79" : ["Конструкционная строительная сталь", "Для упругих элементов ", "(Углеродная сталь) 0,65-0,85"],
    "14959^2–79" : ["Конструкционная строительная сталь", "Для упругих элементов ", "(Легированная сталь)0,47-0,75"],
    "1435–99" : ["Инструментальная сталь", "Для инструмента для холодной обработки давлением и резанием", "0,7-1,3"],
    "5950–2000" : [["Инструментальная сталь", "Для инструмента для холодной обработки давлением и резанием", "0,8-2,2"],
                   ["Инструментальная сталь", "Для инструмента для горячей обработки ластическим деформированием", "0,3-0,8"]],
    "801–78" : ["Инструментальная сталь", "Для колец и тел качения подшипников качения", "1,0"],
    "19265–73" : ["Инструментальная сталь", "Для инструмента для станочной обработки (быстрорежущая сталь)", "0,7-1,10"],
    "5632–72" : [["Специальная сталь", "Для сварного оборудования, работающего в коррозионной среде", "менее 0,08"],
                 ["Специальная сталь", "Для силовых деталей, работающих в особых условиях", "0,08–0,2"],
                 ["Специальная сталь", "Для деталей смешанного применения, работающих в особых условиях", "0,2–0,4"],
                 ["Специальная сталь", "Для инструмента и пружин, работающих в особых условиях", "0,4–0,95"]],
    "977–88" : [["Литейная сталь", "Для деталей сварно-литых конструкций", "0,15-0,25"],
                ["Литейная сталь", "Для силовых литых деталей", "0,30-0,45"],
                ["Литейная сталь", "Для деталей дробильного оборудования", "1,1-1,3"],
                ["Литейная сталь", "Для литого режущего инструмента", "0,8-0,9"]]
}
@dp.message(Command("start"))
async def help(message: types.Message):
    await message.answer('Это бот для получения данных с маркировок стали!\nИспользовать его крайне просто, достаточно написать комманду, а также маркировку!\nСуществуют следующие команды:\n /funcclass [ГОСТ] - Функциональная классификация сталей')

@dp.message(Command("funcclass"))
async def funcclass(message: types.Message):
    global FUNCCLASS
    text = message.text.split()
    if len(text) > 2:
        GOST = f"{text[1]}-{text[2]}"
    else:
        GOST = text[1]
    DATA = FUNCCLASS[GOST]
    string = ""
    if type(DATA[0]) == list:
        string = "Согласно таблице это:\n"
        for count, x in enumerate(DATA):
            string = string + f"{count+1}. {x[0]} использумая {x[1].lower()} с содержанием {x[2]}% углерода\n"
    else:
        string = f"Это {DATA[0].lower()} использумая {DATA[1].lower()} с содержанием {DATA[2]}% углерода"
    await message.answer(string)

@dp.message(Command("steel"))
async def steel(message: types.Message):
    global MATERIALS
    text = message.text.split()
    steelmark = text[1]
    print(steelmark[:2].lower())
    print(steelmark[-2:].lower())
    print(steelmark[-1:].lower())
    if canbeint(steelmark[:2]):
        print("TO+")
        if canbeint(steelmark):
            if int(steelmark) <= 60:
                print("1.1")
                await message.answer("Сталь качественная конструкционная, ГОСТ 1050–88\nПримечание: \nПрименение определяется содержанием углерода\n\nСхема маркировки:\n%С×100 + раскисление(«кп», «пс»)")
            else:
                print("1.2")
                await message.answer("Сталь рессорно-пружинная, ГОСТ 14959–79\nПримечание: \nИспользуется для упругих элементов\n\nСхема маркировки:\n%С×100 + ЛЭ + %ЛЭ + гр. качества «А» в конце")
        elif steelmark[-2:].lower() in ["кп", "пс"]:
            print(1)
            await message.answer("Сталь качественная конструкционная, ГОСТ 1050–88\nПримечание: \nПрименение определяется содержанием углерода\n\nСхема маркировки:\n%С×100 + раскисление(«кп», «пс»)")
        elif steelmark[-1:].lower() == "к":
            print(2)
            await message.answer("Углеродистая cталь для котлов и сосудов, работающих под давлением, ГОСТ 5520–79\nПримечание: \nПрименение определяется содержанием углерода\n\nСхема маркировки:\n%С×100 + К")
        elif steelmark[:2].lower == "хн" or steelmark[2:4].lower == "хн":
            print(3)
            ni = int(steelmark[4:6])
            if ni <= 50:
                await message.answer(f"Сплав на Fe+Ni основе,ГОСТ 5632–72\nПримечание: \nКол-во никеля {ni}%\n\nСхема маркировки:\nХН + %Ni + ЛЭ")
            else:
                await message.answer(f"Сплав на Fe+Ni основе,ГОСТ 5632–72\nПримечание: \nКол-во никеля {ni}%\n\nСхема маркировки:\nХН + %Ni + ЛЭ или Н + %Ni + ЛЭ") # ЧИТАЙ 918492
        elif steelmark[:1].lower == "н" or steelmark[2:3].lower == "н":
            print(4)
            ni = int(steelmark[3:5])
            await message.answer(f"Сплав на Fe+Ni основе,ГОСТ 5632–72\n Примечание: \nКол-во никеля {ni}%\n\nСхема маркировки:\nХН + %Ni + ЛЭ или Н + %Ni + ЛЭ") # ЧИТАЙ 918492
        elif steelmark[-1:].lower() == "а":
            print(6)
            await message.answer("Сталь легированная конструкционная, ГОСТ 4543–71\nПримечание: \nПрименение определяется содержанием углерода\n\nДля упругих элементов:\nСталь рессорно-пружинная, ГОСТ 14959–79\n\nСхема маркировки:\n1. %С×100 + ЛЭ + %ЛЭ + гр. качества «А» или «-Ш» в конце марки\n2. %С×100 + ЛЭ + %ЛЭ + гр. качества «А» в конце")
        elif steelmark[-2:].lower() == "-ш" or steelmark[-1:].lower() == "ш":
            print(7)
            await message.answer("Сталь легированная конструкционная, ГОСТ 4543–71\nПримечание: \nПрименение определяется содержанием углерода\n\nСхема маркировки:\n%С×100 + ЛЭ + %ЛЭ + гр. качества «А» или «-Ш» в конце марки")
        elif inmaterials(steelmark[2:].upper()):
            print(5)
            outstr = ""
            outstr = outstr + "Легированная cталь для котлов и сосудов, работающих под давлением, ГОСТ 5520–79\n Примечание: \nПрименение определяется содержанием углерода\n\n"
            outstr = outstr + "Сталь низколегированная универсальная, ГОСТ 19282–73\nПримечание: \nИспользуется для сварных конструкций\n\n"
            outstr = outstr + "Сталь для армирования ж/б конструкций, ГОСТ 5781–82\nПримечание: \n ж\б конструкций - арматура периодического профиля\n\n"
            outstr = outstr + "Сталь теплоустойчивая, ГОСТ 20072–74\nПримечание: \nдля деталей, работающих в нагруженном состоянии при температуре до 600°С в течении длительного времени\n\n"
            outstr = outstr + "Сталь высоколегированная, ГОСТ 5632–72\nПримечание: \n применение определяется содержанием углерода и легированием\n\n"
            outstr = outstr + "\n\nСхема маркировки: \n%С×100 + ЛЭ + %ЛЭ"
            await message.answer(outstr)
        else:
            print(8)
            await message.answer("Извините, но я не могу прочитать эту маркировку")
    else:
        if steelmark[:2].lower() == "ст":
            print(-1)
            await message.answer("Сталь обыкновенного качества, ГОСТ 380–2005\nПримечание: \nПримерное содержание углерода определяется по формуле С=0,07\nПрименение определяется содержанием углерода\n\nСхема маркировки: \nСт + №марки + раскисление(«кп», «пс», «сп»)")
        elif steelmark[:2].lower() == "хн":
            print(-2)
            ni = int(steelmark[2:4])
            if ni <= 50:
                await message.answer(f"Сплав на Fe+Ni основе,ГОСТ 5632–72\n Примечание: \nКол-во никеля {ni}%\n\nСхема маркировки:\nХН + %Ni + ЛЭ")
            else:
                await message.answer(f"Сплав на Fe+Ni основе,ГОСТ 5632–72\n Примечание: \nКол-во никеля {ni}%\n\nСхема маркировки:\nХН + %Ni + ЛЭ или Н + %Ni + ЛЭ") # ЧИТАЙ 918492
        elif steelmark[:1].lower() == "н":
            print(-3)
            ni = int(steelmark[1:3])
            await message.answer(f"Сплав на Fe+Ni основе,ГОСТ 5632–72\n Примечание: \nКол-во никеля {ni}%\n\nСхема маркировки:\nХН + %Ni + ЛЭ или Н + %Ni + ЛЭ") # ЧИТАЙ 918492
        else:
            print(-8)
            await message.answer("Извините, но я не могу прочитать эту маркировку")


async def main():
    print("Bot started")
    await dp.start_polling(bot)
    


if __name__ == "__main__":
    asyncio.run(main())
